import pyautogui
import time
import numpy as np
import matplotlib.pyplot as plt
from PIL import ImageGrab, Image, ImageEnhance
import cv2
from matplotlib import pyplot as plt
import subprocess

#opening the game
subprocess.Popen(["D:\\Bejeweled 2 Deluxe\\Bejeweled2.exe"])


#windows title moving to the corner
win = pyautogui.getWindowsWithTitle('Bejeweled 2 Deluxe 1.0')[0]

win.activate()
win.moveTo(0, 0)



#(82, 76, 24),
wylosowane_kolory = [(199, 22, 199), (200, 200, 100), (246, 246, 246), (255,165,0), (49, 171, 253), (19, 202, 19),
                     (255, 99, 99),(0,0,0),(82, 76, 24),(255,255,255)]  # in order: pink, yellow,white, orange, blue, green,red
kolory = ['pink','yellow','white','orange','blue','green','red','black','brown','rainbow']


timer = 0
#coordinated for drawing dots on image
kordy = []
a = ''

if a == '':

    x, y = pyautogui.position()
    width, height = 85 * 8, 84 * 8

    screenshot = ImageGrab.grab(bbox=(305, 62, 305 + width, 62 + height))


    plt.imshow(screenshot)
    plt.axis('on')  # WyÅ‚Ä…cz osie
    plt.show()




    array_color = []
    for i in range(3):

        x, y = 305, 62
        aktualny_kolor = pyautogui.pixel(x, y)
        najblizszy_kolor = min(wylosowane_kolory,
                               key=lambda k: sum(abs(k[i] - aktualny_kolor[i]) for i in range(3)))

        #print(aktualny_kolor)
        #print(najblizszy_kolor)
        colors =[]
        #print(colors)
        for j in range(8):
            for i in range(8):
                new_x = x + 85 * i + 42
                new_y = y + 84 * j + 42

                aktualny_kolor = pyautogui.pixel(new_x, new_y)
                #print(aktualny_kolor)
                najblizszy_kolor = min(wylosowane_kolory,
                                       key=lambda k: sum(abs(k[i] - aktualny_kolor[i]) for i in range(3)))

                #print(najblizszy_kolor)
                for k, kolor in enumerate(wylosowane_kolory):
                    if najblizszy_kolor == kolor:
                        colors.append(kolory[k])
                        break
        #print(colors)
        array_color.append(colors)
        color_mapping = {
            'pink': 'ðŸŸª',
            'yellow': 'ðŸŸ¨',
            'white': 'â¬œ',
            'orange': 'ðŸŸ§',
            'blue': 'ðŸŸ¦',
            'green': 'ðŸŸ©',
            'red': 'ðŸŸ¥',
            'black': 'â¬›',
            'brown': '?',
            'rainbow': 'R'
        }
        color = [['' for _ in range(8)] for _ in range(8)]
        for i in range(8):
            for j in range(8):
                index = (i * 8 + j) % len(colors)
                color[i][j] = color_mapping[colors[index]]
        #for row in color:
            #print(' '.join(row))
        #print(color)
    #print(array_color)
    for i in range(3):

        x, y = 305, 62
        aktualny_kolor = pyautogui.pixel(x, y)
        najblizszy_kolor = min(wylosowane_kolory,
                               key=lambda k: sum(abs(k[i] - aktualny_kolor[i]) for i in range(3)))
        #variable to make dots even or something
        t,t2 = 0 , -1
        #print(aktualny_kolor)
        #print(najblizszy_kolor)
        colors =[]
        #print(colors)
        for j in range(8):

            for i in range(8):
                t+=1
                if t == 2:
                    t2+=1
                new_x = x + 85 * i + 6 - i + t2 + 2
                new_y = y + 84 * j + 42
                kordy.append((new_x-305,new_y-62))

                aktualny_kolor = pyautogui.pixel(new_x, new_y)
                #print(aktualny_kolor)
                najblizszy_kolor = min(wylosowane_kolory,
                                       key=lambda k: sum(abs(k[i] - aktualny_kolor[i]) for i in range(3)))
                #print(najblizszy_kolor)
                for k, kolor in enumerate(wylosowane_kolory):
                    if najblizszy_kolor == kolor:
                        colors.append(kolory[k])
                        break
        #print(colors)
        array_color.append(colors)
        color_mapping = {
            'pink': 'ðŸŸª',
            'yellow': 'ðŸŸ¨',
            'white': 'â¬œ',
            'orange': 'ðŸŸ§',
            'blue': 'ðŸŸ¦',
            'green': 'ðŸŸ©',
            'red': 'ðŸŸ¥',
            'black': 'â¬›',
            'brown': 'P',
            'rainbow': 'R'
        }
        color_power = [['' for _ in range(8)] for _ in range(8)]
        for i in range(8):
            for j in range(8):
                index = (i * 8 + j) % len(colors)
                color_power[i][j] = color_mapping[colors[index]]
        #for row in color_power:
            #print(' '.join(row))
        #print(f' [color_power]= {color_power}')
    #print(array_color)
    #print(len(kordy))
    #print(kordy)
    # Wykonaj zrzut ekranu
    '''width, height = 85 * 8, 84 * 8
    xx, yy = 305,62
    # Wykonaj zrzut ekranu w okreÅ›lonym obszarze
    screenshot = pyautogui.screenshot(region=(xx, yy, width, height))
    screenshot.save("screenshot.png")

    # ZaÅ‚aduj zrzut ekranu
    edited_screenshot = Image.open("screenshot.png")


    # Zapisz zedytowany zrzut ekranu
    edited_screenshot.save("edited_screenshot.png")

    image = cv2.imread('screenshot.png')
    for x, y in kordy:
        image = cv2.circle(image, (x, y), radius=0, color=(255, 255, 255), thickness=-3)

    # WyÅ›wietl obraz
    cv2.imshow('Modified Image', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()'''
    # compare arrays to determine what is what
    first_color_array = []
    second_color_array = []
    for gem in color:
        first_color_array+=gem
    #print(first_color_array)
    for gem in color_power:
        second_color_array+=gem


    #comparing
    #new array to have new board state
    pre_final_board = []
    for i in range(64):
        if second_color_array[i] == 'P' and first_color_array[i] == 'R':
            pre_final_board.append('âšª')
        elif second_color_array[i] == 'â¬›' and first_color_array[i] == 'R':
            pre_final_board.append('ðŸŒˆ')
        elif first_color_array[i] == 'ðŸŸ¨' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸ¨')
        elif first_color_array[i] == 'ðŸŸ¥' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸ¥')
        elif first_color_array[i] == 'ðŸŸ§' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸ§')
        elif first_color_array[i] == 'ðŸŸ¦' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸ¦')
        elif first_color_array[i] == 'ðŸŸ©' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸ©')
        elif first_color_array[i] == 'ðŸŸª' and second_color_array[i] != 'P':
            pre_final_board.append('ðŸŸª')
        elif first_color_array[i] == 'â¬œ' and second_color_array[i] != 'P':
            pre_final_board.append('â¬œ')
        elif first_color_array[i] == 'ðŸŸ¨' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸŸ¡')
        elif first_color_array[i] == 'ðŸŸ¥' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸ”´')
        elif first_color_array[i] == 'ðŸŸ§' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸŸ ')
        elif first_color_array[i] == 'ðŸŸ¦' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸ”µ')
        elif first_color_array[i] == 'ðŸŸ©' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸŸ¢')
        elif first_color_array[i] == 'ðŸŸª' and second_color_array[i] == 'P':
            pre_final_board.append('ðŸŸ£')
    # ðŸ”´ðŸŸ ðŸŸ¡ðŸŸ¢ðŸ”µðŸŸ£
    #print(fpre array{pre_final_board})
    final_board = [['' for _ in range(8)] for _ in range(8)]
    color_mapping = {
        'ðŸŸ¨': 'ðŸŸ¨',
        'ðŸŸ¦': 'ðŸŸ¦',
        'ðŸŸª': 'ðŸŸª',
        'â¬œ': 'â¬œ',
        'ðŸŸ©': 'ðŸŸ©',
        'ðŸŸ§': 'ðŸŸ§',
        'ðŸŸ¥': 'ðŸŸ¥',
        'ðŸ”µ': 'ðŸ”µ',
        'âšª': 'âšª',
        'ðŸŒˆ': 'ðŸŒˆ',
        'ðŸ”´': 'ðŸ”´',
        'ðŸŸ£': 'ðŸŸ£',
        'ðŸŸ¢': 'ðŸŸ¢',
        'ðŸŸ ': 'ðŸŸ ',
        'ðŸŸ¡': 'ðŸŸ¡',
    }

    for i, emoji in enumerate(pre_final_board):
        row = i // 8
        col = i % 8
        final_board[row][col] = color_mapping.get(emoji, 'unknown')

    # WyÅ›wietlenie ramki final_board
    for row in final_board:
        print(row)
